# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/

css_offset =
  x: 1
  y: 1
DEBUG = false
ghex = 0
url = 'test'
down = false
sync = true
live_id = "live_slide"
window.global_width = 3

palletHeight = $(window).height()-105
palletWidth = $(window).width()-1

eventMap =
  mousemove: "move",
  touchmove: "move",
  mousedown: "down",
  touchstart: "down",
  mouseup: "up",
  touchend: "up"

event_map =
  mousemove: "move",
  touchmove: "move",
  mousedown: "down",
  touchstart: "down",
  mouseup: "up",
  touchend: "up"

find_position = (obj) ->
  curleft = 0
  curtop = 0
  curleft = $(obj).offset().left - $(window).scrollLeft()
  curtop = $(obj).offset().top - $(window).scrollTop()
  { x: curleft, y: curtop }

changeTool = () ->
  $('.tool_select').click ->
    $('.tool_select').removeClass('active')
    $(this).addClass('active')
    $('#drawing').show()
    return
  return

currentTool = () ->
  $(".tool_select.active").data('type')

mouse_draw = (e) ->
  position = find_position(@)
  e._x = e.clientX - position.x
  e._y = e.clientY - position.y
  if currentTool() == 'eraser'
    $('#drawing').hide()
  func = tools[currentTool()][e.type]
  if func?
    func(e)

touchDraw = (e) ->
  position = find_position(@)
  e._x = e.targetTouches[0].clientX - positionX
  e._y = e.targetTouches[0].clientY - positionY
  func = tool[eventMap[e.type]]
  if func?
    func(e)

  if e.type == "touchmove"
    event.preventDefault()
  else if eventMap[e.type] == "down"
    down = true
  else if eventMap[e.type] == "up"
    down = false

resizeCanvas = ->
  palletHeight = $(window).height()-105
  palletWidth = $(window).width()-1
  $('#drawing').attr('height', palletHeight).attr('width', palletWidth)
  $('#live_canvas').height(palletHeight).width(palletWidth)
  liveCanvas.setSize(palletWidth, palletHeight)

strokeExample = (width) ->
  examplePallet.clear()
  examplePallet.path("M0 11L100 11").attr({stroke: "#000", 'stroke-linecap': 'round', 'stroke-width': width})

  miniExamplePallet.clear()
  miniExamplePallet.path("M0 6L40 6").attr({stroke: "#000", 'stroke-linecap': 'round', 'stroke-width': width})

init = ->
# pencilGraphic = Raphael("pencil_graphic", 28, 30)
# pencilGraphic.path("M25.31,2.872l-3.384-2.127c-0.854-0.536-1.979-0.278-2.517,0.576l-1.334,2.123l6.474,4.066l1.335-2.122C26.42,4.533,26.164,3.407,25.31,2.872zM6.555,21.786l6.474,4.066L23.581,9.054l-6.477-4.067L6.555,21.786zM5.566,26.952l-0.143,3.819l3.379-1.787l3.14-1.658l-6.246-3.925L5.566,26.952z").attr({stroke: "#272727", 'stroke-linecap': 'round', 'stroke-width': 1, fill: "#272727"})
  window.examplePallet = Raphael("stroke_example", 100, 21)
  window.miniExamplePallet = Raphael("mini_stroke_example", 40, 11)
  strokeExample(3)
  $("#stroke_width_slider").slider(
    max: 10
    min: 3
    step: 1
    value: 3
    slide: (e, ui) ->
      window.global_width = ui.value
      strokeExample(ui.value)
  )

  $("#stroke_width_select").click( ->
    $("#tool_pallet").slideToggle('slow')
  )

  window.liveCanvas = Raphael("live_canvas", palletWidth, palletHeight)
  resizeCanvas()
  changeTool()
  $(window).resize ->
    resizeCanvas()

  $("#drawing").bind('mousedown mousemove mouseup', mouse_draw)

  window.pusher = new Pusher('b106769bbea5c2e08e77')
  window.channel = pusher.subscribe($("#drawing").data("presentation"))
  channel.bind('squiggle_create_event', (thing) ->
    shape = new Squiggle()
    shape.addPointsBlob(thing.points)
      .draw("#{thing.hash}", thing.stroke_width)
  )

  channel.bind('squiggle_destroy_event', (thing) ->
    $("#id_#{thing.hash}").get(0).raphael.remove()
  )

  channel.bind('survey_redirect', (data) ->
    $('#notice p').text "Thanks for working with me, I will redirect you to a survey now"
    $('#notice').slideDown('slow', ->
      setTimeout(->
        window.location = '/survey'
      , 3000)
    )
  )

  $('#tool').change ->
    if currentTool() == 'eraser'
      $('#drawing').hide()
    else
      $('#drawing').show()

window.runShapes = (slide) ->
  for shape in slide
    squiggle = new Squiggle()
    squiggle.addPointsBlob(shape.points)
      .draw("#{shape.hash}", shape.stroke_width)

$(document).ready =>
  init()

